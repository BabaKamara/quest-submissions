Quests

1. Explain what lives inside of an account.
    My stored data.

2. What is the difference between the /storage/, /public/, and /private/ paths?
   /public/ : is an account where all stored data are accessible path to the public (to anyone)
   /storage/ : is an account where all stored data are accessible to the owner of the account ONLY.
   /private/ : is is an account where all stored data are accessible to the owner himself and to some people who grant access permission (restricted access).

3. What does .save() do? What does .load() do? What does .borrow() do?
    .save() is a function that brings data into my account.
    .load() is a function that takes out data from my account storage.
    .borrow() is a function that just monitor our data stored in our account storage.
    
4. Explain why we couldn't save something to our account storage inside of a script.
    By its definition we can only read data in a script, witch means writing (saving) is not possible.

5. Explain why I couldn't save something to your account.
    /storage/ is a path only and stricly accessible to its owner, none else.
    

6. Define a contract that returns a resource that has at least 1 field in it. Then, write 2 transactions:

   i. A transaction that first saves the resource to account storage, then loads it out of account storage, logs a field inside the resource, and destroys it.
   
     
     TRANSACTION THAT SAVES THE RESOURCE TO ACCOUNT STORAGE
     
     pub contract Bingo {

  pub resource Test {
    pub var name: String
    init() {
      self.name = "Baba"
    }
  }

  pub fun createTest(): @Test {
    return <- create Test()
  }

}


THEN LOADS IT OUT OF ACCOUNT STORAGE, LOGS A FIELD INSIDE THE RESOURCE, AND DESTROYS IT

import Bingo from 0x01
transaction() {
  prepare(signer: AuthAccount) {
    let testResource <- signer.load<@Bingo.Test>(from: /storage/MyTestResource)
                          ?? panic("A `@Bingo.Test` resource does not live here.")
    log(testResource.name) // "Baba"

    destroy testResource
  }

  execute {

  }
}



   ii. A transaction that first saves the resource to account storage, then borrows a reference to it, and logs a field inside the resource.
   
       
       import Bingo from 0x01
transaction() {
  prepare(signer: AuthAccount) {
    // NOTICE: This gets a `&Bingo.Test`, not a `@Bingo.Test`
    let testResource = signer.borrow<&Bingo.Test>(from: /storage/MyTestResource)
                          ?? panic("A `@Bingo.Test` resource does not live here.")
    log(testResource.name) // "Baba"
  }

  execute {

  }
}


   
   
